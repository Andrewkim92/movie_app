{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","_ref","title","poster","genres","synopsis","react_default","a","createElement","className","MoviePoster","alt","map","genre","index","MovieGenre","key","_ref2","_ref3","src","prototype","propTypes","string","isRequired","proTypes","medium_cover_image","App","state","_renderMovies","_this","movies","movie","src_Movie","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","targetUrl","fetch","headers","Content-Type","credentials","then","movieDatas","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAKA,SAASA,EAATC,GAA8C,IAA9BC,EAA8BD,EAA9BC,MAAMC,EAAwBF,EAAxBE,OAAOC,EAAiBH,EAAjBG,OAAOC,EAAUJ,EAAVI,SAClC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEfH,EAAAC,EAAAC,cAACE,EAAD,CAAaP,OAAQA,EAAQQ,IAAKT,KAElCI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,OAAKC,UAAY,gBACdL,EAAOQ,IAAI,SAACC,EAAMC,GAAP,OAAiBR,EAAAC,EAAAC,cAACO,EAAD,CAAYF,MAAOA,EAAOG,IAAKF,OAE9DR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBACVJ,KAMX,SAASU,EAATE,GAA4B,IAAPJ,EAAOI,EAAPJ,MACnB,OACEP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBI,GAIpC,SAASH,EAATQ,GAAkC,IAAZf,EAAYe,EAAZf,OAAOQ,EAAKO,EAALP,IAC3B,OACEL,EAAAC,EAAAC,cAAA,OAAKW,IAAKhB,EAAQQ,IAAKA,EAAKT,MAAOS,EAAKF,UAAU,kBAItDT,EAAMoB,UAAY,CAChBlB,MAAOmB,IAAUC,OAAOC,WACxBpB,OAASkB,IAAUC,OAAOC,WAC1BP,IAAIK,IAAUC,OAAOC,WACrBnB,OAAOiB,IAAUC,OAAOC,WACxBlB,SAASgB,IAAUC,OAAOC,YAG5Bb,EAAYU,UAAW,CACrBjB,OAASkB,IAAUC,OAAOC,YAG5BR,EAAWS,SAAS,CAClBrB,OAAQkB,IAAUC,OAAOG,oBAGZzB,QCmBA0B,6MA7DbC,MAAM,KAURC,cAAgB,WAUd,OATeC,EAAKF,MAAMG,OAAOlB,IAAI,SAAAmB,GACnC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,CACP9B,MAAO6B,EAAM7B,MACbC,OAAQ4B,EAAMN,mBACdT,IAAKe,EAAME,GACX7B,OAAQ2B,EAAM3B,OACdC,SAAU0B,EAAM1B,gBAMnB6B,gCAAa,SAAAC,IAAA,IAAAL,EAAA,OAAAM,EAAA7B,EAAA8B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSX,EAAKY,WADd,OACNX,EADMQ,EAAAI,KAEZb,EAAKc,SAAS,CACZb,WAHU,wBAAAQ,EAAAM,SAAAT,EAAAU,WAOdJ,SAAW,WAEX,IAAIK,EAAW,wDAEb,OAAOC,MAAMD,EAAU,CAACE,QAAS,CAC/BC,eAAgB,oBAElBC,YAAa,YACZC,KAAK,SAAAC,GAAU,OAAIA,EAAWC,SAC9BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKxB,SACvByB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFAjC1BX,KAAKX,8CA8CH,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZoC,KAAKlB,MAAMG,OAASe,KAAKjB,gBAAkB,kBA1DlC+B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.80c207a8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport propTypes from 'prop-types';\r\nimport './Movie.css';\r\n\r\n\r\nfunction Movie({title,poster,genres,synopsis}){\r\n  return(\r\n    <div className=\"Movie\">\r\n      <div className=\"Movie__Columns\">\r\n      \r\n      <MoviePoster poster={poster} alt={title}/>\r\n      </div>\r\n      <div className=\"Movie__Columns\">\r\n        <h1>{title}</h1>\r\n        <div className = \"Movie_Genres\">\r\n          {genres.map((genre,index) => <MovieGenre genre={genre} key={index}/>)}\r\n        </div>\r\n        <p className=\"Movie__Synopsis\">\r\n          {synopsis}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nfunction MovieGenre({genre}){\r\n  return(\r\n    <span className=\"Movie__Genre\">{genre}</span>\r\n  )\r\n}\r\n\r\nfunction MoviePoster({poster,alt}){\r\n  return (\r\n    <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"></img>\r\n  )\r\n}\r\n\r\nMovie.prototype = {\r\n  title: propTypes.string.isRequired,\r\n  poster : propTypes.string.isRequired,\r\n  key:propTypes.string.isRequired,\r\n  genres:propTypes.string.isRequired,\r\n  synopsis:propTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.prototype ={\r\n  poster : propTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.proTypes={\r\n  poster: propTypes.string.medium_cover_image\r\n}\r\n\r\nexport default Movie\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport './Movie.js';\nimport Movie from './Movie.js';\n\n\n\nclass App extends Component {\n\n \n  state={\n    \n  }\n\ncomponentDidMount(){\n  //\n\n  this._getMovies();\n}\n\n_renderMovies = () =>{\n  const movies = this.state.movies.map(movie =>{    \n    return <Movie \n    title={movie.title} \n    poster={movie.medium_cover_image}\n    key={movie.id}\n    genres={movie.genres}\n    synopsis={movie.synopsis} \n    />\n  })   \n  return movies\n}\n\n _getMovies = async () => {\n  const movies = await this._callApi()\n  this.setState({\n    movies\n  })\n}\n\n_callApi = () => {\n\nlet targetUrl ='https://yts.ag/api/v2/list_movies.json?sort_by=rating'\n\n  return fetch(targetUrl,{headers: {\n    'Content-Type': 'application/json'\n  },\n  credentials: 'include'})\n  .then(movieDatas => movieDatas.json())\n  .then(json => json.data.movies)\n  .catch(err => console.log(err))\n  \n  return fetch(targetUrl,{mode: 'no-cors'},)\n  .then(function(response) {\n    console.log(response); \n  }).catch(function(error) {  \n    console.log('Request failed', error)  \n  });\n\n\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.movies ? this._renderMovies() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}